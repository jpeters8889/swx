<?php

namespace Tests\Unit;

use App\Events\SessionCreated;
use App\Models\Group;
use App\Models\GroupSession;
use App\Models\Session;
use App\Models\User;
use Carbon\Carbon;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Event;
use Tests\TestCase;

class SessionCreatedEventTest extends TestCase
{
    use RefreshDatabase;

    protected Group $group;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->group = factory(Group::class)->create(['user_id' => factory(User::class)->create()]);
    }

    /** @test */
    public function it_dispatches_the_event()
    {
        Event::fake(SessionCreated::class);

        factory(Session::class)->create(['group_id' => 1]);

        Event::assertDispatched(SessionCreated::class);
    }

    /** @test */
    public function it_creates_the_initial_group_sessions()
    {
        $this->assertEmpty(GroupSession::all());

        /** @var Session $session */
        $session = factory(Session::class)->create([
            'group_id' => 1,
            'first_session_date' => $startDate = Carbon::parse('2020-08-01'),
            'advance_weeks_to_create' => 3,
        ]);

        $this->assertNotEmpty(GroupSession::all());
        $this->assertNotEmpty($session->groupSessions);
        $this->assertCount(4, $session->groupSessions);

        $this->assertTrue($startDate->isSameDay($session->groupSessions[0]->date));
        $this->assertTrue($startDate->addWeek()->isSameDay($session->groupSessions[1]->date));
        $this->assertTrue($startDate->addWeeks()->isSameDay($session->groupSessions[2]->date));
    }
}
