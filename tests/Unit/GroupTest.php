<?php

namespace Tests\Unit;

use App\Models\Group;
use App\Models\GroupSession;
use App\Models\Session;
use App\Models\User;
use Carbon\Carbon;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Collection;
use Tests\TestCase;

class GroupTest extends TestCase
{
    use RefreshDatabase;

    protected Group $group;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->group = factory(Group::class)->create(['user_id' => factory(User::class)->create()]);
    }

    /** @test */
    public function it_creates_a_slug()
    {
        Group::query()->truncate();

        $group = factory(Group::class)->create([
            'user_id' => User::query()->first(),
            'name' => 'Group Title'
        ]);

        $this->assertNotNull($group->slug);
        $this->assertEquals('group-title', $group->slug);
    }

    /** @test */
    public function it_belongs_to_a_user()
    {
        $this->assertInstanceOf(User::class, $this->group->user);
    }

    /** @test */
    public function it_has_many_sessions()
    {
        $this->assertEmpty($this->group->sessions);

        factory(Session::class)->create(['group_id' => $this->group]);

        $this->assertNotEmpty($this->group->fresh()->sessions);
    }

    /** @test */
    public function it_can_have_group_sessions()
    {
        $this->assertEmpty($this->group->groupSessions);

        $session = factory(Session::class)->create(['group_id' => $this->group]);

        GroupSession::query()->create([
            'group_id' => $this->group->id,
            'session_id' => $session->id,
            'date' => Carbon::today(),
        ]);

        $this->assertNotEmpty($this->group->fresh()->groupSessions);
    }

    /** @test */
    public function it_returns_a_formatted_list_of_sessions()
    {
        factory(Session::class)->create(['group_id' => 1, 'day_id' => 4, 'start_at' => '17:00']);
        factory(Session::class)->create(['group_id' => 1, 'day_id' => 2, 'start_at' => '09:30']);
        factory(Session::class)->create(['group_id' => 1, 'day_id' => 2, 'start_at' => '11:00']);
        factory(Session::class)->create(['group_id' => 1, 'day_id' => 6, 'start_at' => '11:00', 'new_member_session' => 1]);

        $this->group->fresh(['sessions']);

        $sessionList = $this->group->session_list;

        $this->assertIsArray($sessionList);
        $this->assertArrayHasKey('Monday', $sessionList);
        $this->assertArrayHasKey('Wednesday', $sessionList);
        $this->assertArrayHasKey('Friday', $sessionList);

        $this->assertIsArray($sessionList['Monday']);
        $this->assertIsArray($sessionList['Wednesday']);
        $this->assertIsArray($sessionList['Friday']);

        $this->assertCount(2, $sessionList['Monday']);
        $this->assertCount(1, $sessionList['Wednesday']);
        $this->assertCount(1, $sessionList['Friday']);

        $this->assertEquals(['9:30am', '11am'], $sessionList['Monday']);
        $this->assertEquals(['5pm'], $sessionList['Wednesday']);
        $this->assertEquals(['11am*'], $sessionList['Friday']);
    }
}
