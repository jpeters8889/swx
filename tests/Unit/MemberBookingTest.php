<?php

namespace Tests\Unit;

use App\Events\SessionCreated;
use App\Models\Group;
use App\Models\GroupSession;
use App\Models\Member;
use App\Models\MemberBooking;
use App\Models\Session;
use App\Models\User;
use Carbon\Carbon;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Event;
use Tests\TestCase;

class MemberBookingTest extends TestCase
{
    use RefreshDatabase;

    protected Group $group;
    protected Session $session;
    protected GroupSession $groupSession;
    protected Member $member;
    protected MemberBooking $booking;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        Event::fake(SessionCreated::class);

        $this->group = factory(Group::class)->create(['user_id' => factory(User::class)->create()]);
        $this->session = factory(Session::class)->create(['group_id' => $this->group->id]);

        $this->groupSession = GroupSession::query()->create([
            'group_id' => $this->group->id,
            'session_id' => $this->session->id,
            'date' => Carbon::tomorrow(),
        ]);

        $this->member = factory(Member::class)->create();
        $this->groupSession->bookMember($this->member);

        $this->booking = MemberBooking::query()->first();
    }

    /** @test */
    public function it_belongs_to_a_group_session()
    {
        $this->assertInstanceOf(GroupSession::class, $this->booking->groupSession);
        $this->assertTrue($this->groupSession->is($this->booking->groupSession));
    }

    /** @test */
    public function it_belongs_to_a_member()
    {
        $this->assertInstanceOf(Member::class, $this->booking->member);
        $this->assertTrue($this->member->is($this->booking->member));
    }

    /** @test */
    public function it_knows_whether_it_can_be_cancelled()
    {
        $this->assertIsBool($this->booking->cancelable);
    }

    /** @test */
    public function it_cant_be_cancelled_if_the_group_has_happened()
    {
        $this->groupSession->update(['date' => Carbon::yesterday()]);

        $this->assertFalse($this->booking->fresh()->cancelable);
    }

    /** @test */
    public function it_can_be_cancelled_if_the_session_is_in_the_future()
    {
        $this->assertTrue($this->booking->cancelable);

        $now = Carbon::now();

        $this->session->update(['start_at' => $now->addMinute()->format('H:i:s')]);
        $this->groupSession->update(['date' => $now]);

        $this->assertTrue($this->booking->fresh()->cancelable);

        $now = Carbon::now();

        $this->session->update(['start_at' => $now->subMinute()->format('H:i:s')]);
        $this->groupSession->update(['date' => $now]);

        $this->assertFalse($this->booking->fresh()->cancelable);
    }
}
