<?php

namespace Tests\Unit;

use App\Events\SessionCreated;
use App\Exceptions\MemberAlreadyOnSessionException;
use App\Exceptions\SessionFullException;
use App\Models\Group;
use App\Models\GroupSession;
use App\Models\Member;
use App\Models\MemberCancellation;
use App\Models\Session;
use App\Models\User;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Event;
use Tests\TestCase;

class GroupSessionsTest extends TestCase
{
    use RefreshDatabase;

    protected Group $group;
    protected Session $session;
    protected GroupSession $groupSession;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        Event::fake(SessionCreated::class);

        $this->group = factory(Group::class)->create(['user_id' => factory(User::class)->create()]);
        $this->session = factory(Session::class)->create(['group_id' => $this->group->id]);

        $this->groupSession = GroupSession::query()->create([
           'group_id' => $this->group->id,
           'session_id' => $this->session->id,
           'date' => Carbon::today(),
        ]);
    }

    /** @test */
    public function it_has_a_group()
    {
        $this->assertInstanceOf(Group::class, $this->groupSession->group);
        $this->assertTrue($this->group->is($this->groupSession->group));
    }

    /** @test */
    public function it_has_a_session()
    {
        $this->assertInstanceOf(Session::class, $this->groupSession->session);
        $this->assertTrue($this->session->is($this->groupSession->session));
    }

    /** @test */
    public function it_can_check_the_remaining_seats()
    {
        $this->session->update(['seats' => 1]);

        $this->assertTrue($this->groupSession->hasAvailableSeat());

        $this->groupSession->bookMember(factory(Member::class)->create(), true);

        $this->assertFalse($this->groupSession->fresh()->hasAvailableSeat());
    }

    /** @test */
    public function it_can_check_the_remaining_wiegh_slots()
    {
        $this->session->update(['weigh_and_go_slots' => 1]);

        $this->assertTrue($this->groupSession->hasAvailableWeighSlot());

        $this->groupSession->bookMember(factory(Member::class)->create(), false);

        $this->assertFalse($this->groupSession->fresh()->hasAvailableWeighSlot());
    }

    /** @test */
    public function it_can_book_members()
    {
        $this->assertEmpty($this->groupSession->bookings);

        $this->groupSession->bookMember(factory(Member::class)->create());

        $this->assertNotEmpty($this->groupSession->fresh()->bookings);
    }

    /** @test */
    public function it_errors_when_attempting_to_add_seated_members_when_the_capacity_is_full()
    {
        $this->session->update(['seats' => 1]);

        $this->groupSession->bookMember(factory(Member::class)->create());

        $this->expectException(SessionFullException::class);
        $this->expectExceptionMessage('No slots available in this session');

        $this->groupSession->fresh()->bookMember(factory(Member::class)->create());
    }

    /** @test */
    public function it_errors_when_attempting_to_add_weigh_members_when_the_capacity_is_full()
    {
        $this->session->update(['weigh_and_go_slots' => 1]);

        $this->groupSession->bookMember(factory(Member::class)->create(), false);

        $this->expectException(SessionFullException::class);
        $this->expectExceptionMessage('No slots available in this session');

        $this->groupSession->fresh()->bookMember(factory(Member::class)->create(), false);
    }

    /** @test */
    public function it_errors_when_trying_to_book_a_member_that_is_already_booked_on_the_session()
    {
        $member = factory(Member::class)->create();

        $this->groupSession->bookMember($member);

        $this->expectException(MemberAlreadyOnSessionException::class);
        $this->expectExceptionMessage('Member already exists on this session');

        $this->groupSession->fresh()->bookMember($member);
    }

    /** @test */
    public function it_has_cancellations()
    {
        factory(Member::class)->create();
        $cancellation = MemberCancellation::query()->create(['member_id' => 1, 'group_session_id' => 1]);

        $this->assertInstanceOf(Collection::class, $cancellations =$this->groupSession->fresh()->cancellations);
        $this->assertTrue($cancellation->is($cancellations[0]));
    }

    /** @test */
    public function members_can_be_cancelled()
    {
        $member = factory(Member::class)->create();
        $this->assertEmpty($this->groupSession->cancellations);

        $this->groupSession->cancelBooking($member->id);

        $this->assertNotEmpty($this->groupSession->fresh()->cancellations);
        $this->assertEquals($member->id, MemberCancellation::query()->first()->member_id);
    }
}
